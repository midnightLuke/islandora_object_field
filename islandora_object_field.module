<?php

/**
 * @file
 * Hooks and helper functions for the islandora_object_field module.
 */

/* Hooks. */

/**
 * Implements hook_menu().
 */
function islandora_object_field_menu() {
  $items['islandora_object_field/autocomplete/%'] = array(
    'title' => 'Islandora Object Autocomplete',
    'page callback' => 'islandora_object_field_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('view fedora repository objects'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function islandora_object_field_field_info() {
  return array(
    'islandora_object_field' => array(
      'label' => t('Islandora Object'),
      'description' => t('References an object stored in a Fedora Repository using Islandora.'),
      'settings' => array('content_models' => array()),
      'instance_settings' => array(),
      'default_widget' => 'islandora_object_field_autocomplete_widget',
      'default_formatter' => 'islandora_object_field_label_formatter',
      'property_type' => 'islandora_object_field',
      'property_callbacks' => array('islandora_object_field_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function islandora_object_field_field_schema($field) {
  $columns = array(
    'pid' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array(
      'pid' => array('pid'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function islandora_object_field_field_settings_form($field, $instance, $has_data) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $form = array(
    'content_models' => array(
      '#type' => 'checkboxes',
      '#title' => t('Enabled content models'),
      '#description' => t('The content models allowed to be referenced with this widget'),
      '#options' => array(),
      '#disabled' => $has_data,
      '#default_value' => $field['settings']['content_models'],
    ),
  );
  foreach (islandora_get_content_models() as $cmodel) {
    $form['content_models']['#options'][$cmodel['pid']] = $cmodel['label'];
  }
  return $form;
}

/**
 * Implements hook_field_access().
 */
function islandora_object_field_field_access($op, $field, $entity_type, $entity, $account) {
  // TODO: Implement Islandora access checks on referenced object.
  return TRUE;
}

/**
 * Implements hook_field_widget_info().
 */
function islandora_object_field_field_widget_info() {
  return array(
    'islandora_object_field_autocomplete' => array(
      'label' => t('Autocomplete'),
      'field types' => array('islandora_object_field'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function islandora_object_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'fieldset',
    'pid' => array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'islandora_object_field/autocomplete/' . $field['field_name'],
      '#default_value' => isset($items[$delta]['pid']) ? $items[$delta]['pid'] : '',
    ),
  );
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function islandora_object_field_field_is_empty($item, $field) {
  if (empty($item['pid']) && (string) $item['pid'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function islandora_object_field_field_formatter_info() {
  return array(
    'islandora_object_field_label_formatter' => array(
      'label' => t('Object label'),
      'field types' => array('islandora_object_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function islandora_object_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $repository = islandora_get_tuque_connection()->repository;

  switch ($display['type']) {
    case 'islandora_object_field_label_formatter':
      foreach ($items as $delta => $item) {
        try {
          $object = $repository->getObject($item['pid']);
          $element[$delta] = array(
            '#theme' => 'islandora_object_field_label',
            '#object' => $object,
            '#pid' => $item['pid'],
            '#label' => $object->label,
          );
        }
        catch (Exception $e) {
          // This is likely a permissions issue, continue on.
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function islandora_object_field_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_object_field_label' => array(
      'template' => 'templates/islandora-object-field-label',
      'variables' => array('label' => NULL, 'pid' => NULL, 'object' => NULL),
    ),
  );
}

/* Menu callbacks. */

/* Field API callbacks. */

/**
 * Callback information for the islandora object field.
 */
function islandora_object_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['raw getter callback'] = 'entity_property_verbatim_get';
  $property['getter callback'] = 'islandora_object_field_get';
  $property['setter callback'] = 'islandora_object_field_set';
  unset($property['query callback']);
}

/**
 * Getter callback for the islandora object field.
 *
 * Loads the appropriate islandora objects and returns those.
 */
function islandora_object_field_get($entity, array $options, $name, $entity_type, &$context) {
  // Get Islandora repository.
  $repository = islandora_get_tuque_connection()->repository;

  // Set contextual info useful for getters of any child properties.
  $context['instance'] = field_info_instance($context['parent']->type(), $name, $context['parent']->getBundle());
  $context['field'] = field_info_field($name);

  // Language options.
  $langcode = isset($options['language']) ? $options['language']->language : LANGUAGE_NONE;
  $langcode = entity_metadata_field_get_language($entity_type, $entity, $context['field'], $langcode, TRUE);

  // Get objects from the repository.
  $return = array();
  if (isset($entity->{$name}[$langcode])) {
    foreach ($entity->{$name}[$langcode] as $delta => $value) {
      $return[$delta] = $repository->getObject($value['pid']);
    }
    if ($context['field']['cardinality'] == 1) {
      return isset($entity->{$name}[$langcode][0]) ? $return[0] : NULL;
    }
  }
  return isset($entity->{$name}[$langcode]) ? $return : array();
}

/**
 * Setter callback for the islandora object field.
 *
 * Accepts either a PID or a IslandoraFedoraObject object.
 */
function islandora_object_field_set($entity, $name, $items, $langcode, $entity_type) {
  $field = field_info_field($name);
  $langcode = entity_metadata_field_get_language($entity_type, $entity, $field, $langcode);
  $value = $field['cardinality'] == 1 ? array($items) : (array) $items;

  $set = array();
  foreach ($value as $item) {
    if (is_object($item) && $item instanceof IslandoraFedoraObject) {
      $set[]['pid'] = $item->id;
    }
    elseif ($item !== NULL) {
      $set[]['pid'] = $item;
    }
  }

  // Filter out any items set to NULL.
  $entity->{$name}[$langcode] = array_filter($set);

  // Empty the static field language cache, so the field system picks up any
  // possible new languages.
  drupal_static_reset('field_language');
}

/* Form handlers. */

/**
 * Validation callback.
 */
function islandora_object_field_element_validate($form, &$form_state) {
  // TODO: Some validation.
}

/* Menu callbacks. */

/**
 * Page callback: Displays autocomplete items for Islandora objects.
 *
 * @see islandora_object_field_menu()
 * @see islandora_object_field_field_info()
 * @see islandora_object_field_field_widget_info()
 */
function islandora_object_field_autocomplete($field, $search) {
  // Get field settings and available cmodels.
  $field = field_info_field($field);
  $cmodels = array_filter($field['settings']['content_models']);
  $repository = islandora_get_tuque_connection()->repository;

  // Build UNION statement.
  $where_strings = array();
  foreach ($cmodels as $cmodel) {
    $where_strings[] = <<<EOQ
  {
    ?pid <fedora-model:label> ?label ;
    <fedora-model:hasModel> <info:fedora/$cmodel> .
    FILTER(regex(?label, '$search') || regex(str(?pid), '$search' ))
  }
EOQ;
  }

  // Sub in generic query if no cmodels defined.
  if (count($where_strings)) {
    $where_string = implode(' UNION ', $where_strings);
  }
  else {
    $where_string = "?pid <fedora-model:label> ?label ;\nFILTER(regex(?label, '$search') || regex(str(?pid), '$search' ))";
  }

  // SPARQL query.
  $results = $repository->ri->sparqlQuery("SELECT ?pid ?label WHERE { $where_string }");
  $return = array();
  foreach ($results as $objects) {
    $return[$objects['pid']['value']] = t('@label (@pid)', array(
      '@label' => $objects['label']['value'],
      '@pid' => $objects['pid']['value'],
    ));
  }

  // Return the results.
  drupal_json_output($return);
}
